exit
nexi
n
display board.board.flatten.count { |tile| (tile.revealed == true || tile.edge == true) }
board.board.flatten.count { |tile| (tile.revealed == true || tile.edge == true) }
exit
n
board.boardSize["width"] * board.boardSize["height"] - board.boardSize["mines"]
board.board.flatten.count { |tile| (tile.revealed == true || tile.edge == true) }
display board.board.flatten.count { |tile| tile.revealed == true || tile.edge ==
exit
n
display board.boardSize["width"] * board.boardSize["height"] - board.boardSize["mines"]
display board.board.flatten.count { |tile| tile.revealed == true }
board.board.flatten.count { |tile| tile.revealed == true }
exit
board.boardSize["width"] * board.boardSize["height"] - board.boardSize["mines"]
board
board.showBoard("currentGame")
board.showBoard("revealed")
board.board.flatten.count { |tile| tile.revealed == false }
board.board.flatten.count { |tile| tile.revealed == true }
board.board.flatten
board.board[0]
board.board
board
board.board.count { |tile| tile.revealed == true }
self.board
board.board
c
xLoc
yLoc
c
xLoc
yLoc
exit
yLoc
arr
c
exit
xLoc
yLoc
board.board[yLoc][xLoc]
board.boardSize
yLoc
n
board.board[xLoc][yLoc]
board.board[yLoc][xLoc]
xLoc
yLoc
n
c
n
exit
display arr
undisplay arr
board.board[arr[0].to_i][arr[1].to_i]
display arr
exit
n
s
exit
exitg
userBoard[y][x].edge
userBoard[y][x]
board[y][x]
display y
display x
userBoard
exit
ex
self.boardSize
exit
n
s
board[j][i].mine
board[j][i].adjMines
board[j][i]
display i
display j
exit
n
s
display board[j][i]
board[i][j]
display j
display i
board
c
n
userBoard[yCoor][xCoor].mineExploded
n
userBoard[yCoor][xCoor].mine
s
exit
userBoard[yCoor][xCoor].mineExploded
n
s
exit
userBoard[yCoor][xCoor].mineExploded
s
userBoard[yCoor][xCoor].mine
c
board.board.showBoard("revealed")
self.board.showBoard("revealed")
s
userBoard[yCoor][xCoor].mine
exit
userBoard[yCoor][xCoor].mine
c
n
c
exit
userBoard[y][x]
userBoard
exit
b
exit
n
self.board.board[y][x].flagged
n
self.board.board[y][x].flagged
n
self.board.board[y][x]
exit
self.board.board[entryLocation[1]][entryLocation[0]]
self.board
self.board.flagged
n
self.board.board[entryLocation[0]][entryLocation[1]]
self.board.board[entryLocation[0], entryLocation[1]]
self.board.board
self.board
exit
c
n
display el
display tileElement
d tileElement
n
el.flagged
tileElement
el
n
tileElement
el
exit
c
n
s
el
s
el
s
el.revealed
s
el.flagged
el
n
tileElement
el
s
n
el
s
el
s
n
s
n
c
n
el
s
n
row
s
n
board
exit
s
self
testGame
c
exit
board.board[yLoc][xLoc].revealed
board.board[yLoc][xLoc]
xLoc
yLoc
board.board
board
exit
c
n
exit
8 < board.boardSize["width"]
9 < board.boardSize["width"]
8 < board.boardSize["height"]
9 < board.boardSize["height"]
xLoc < board.boardSize["width"]
yLoc < board.boardSize["height"]
yLoc
exit
exitr
board.boardSize["width"]
board.boardSize["height"]
board.boardSize[height]
board.boardSize.height
board.height
board
exit
xLoc
yLoc
n
@board
board
exit
printBoard
n
c
n
c
boardRows
c
boardRows
c
n
el.mine
el
s
n
el
boardRows
n
row
s
board
s
n
exit
exot
exit
load "board.rb"
el.mine
el
s
n
row
rows
s
board
exit
board
mines
n
s
